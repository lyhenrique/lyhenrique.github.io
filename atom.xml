<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>May the force be with you</title>
  
  <subtitle>All good things</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lyhenrique.github.io/"/>
  <updated>2018-03-29T06:32:36.424Z</updated>
  <id>http://lyhenrique.github.io/</id>
  
  <author>
    <name>Eric Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring中的@Async注解</title>
    <link href="http://lyhenrique.github.io/2018/03/29/Spring-async/"/>
    <id>http://lyhenrique.github.io/2018/03/29/Spring-async/</id>
    <published>2018-03-29T06:32:48.910Z</published>
    <updated>2018-03-29T06:32:36.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring中的-Async注解"><a href="#Spring中的-Async注解" class="headerlink" title="Spring中的@Async注解"></a>Spring中的@Async注解</h1><h2 id="1-同步和异步"><a href="#1-同步和异步" class="headerlink" title="1.同步和异步"></a>1.同步和异步</h2><p>同步：一直等到所有结果处理完，才返回给用户。这种情况下如果处理内容繁琐时间较长，就会使用户等待时间过长，造成一种卡死的错觉。</p><p>异步：将用户的请求放入队列，在后续进行处理。实时返回给用户，让用户可以继续进行后续操作，而不必等待操作结果。</p><h2 id="2-常规的异步调用处理方式"><a href="#2-常规的异步调用处理方式" class="headerlink" title="2.常规的异步调用处理方式"></a>2.常规的异步调用处理方式</h2><p>早先处理与第三方系统交互响应迟缓的情况，会基于创建独立的线程去完成响应的异步调用逻辑，通过主线程和不同线程之间的执行流程，从而在启动独立线程之后，主线程继续执行而不会产生停滞等待的情况。</p><p>后续会使用将线程放入线程池中让线程池帮助管理线程的形式来进行一定的优化。或者时使用TaskExecutor执行异步线程。</p><h2 id="3-Async的使用"><a href="#3-Async的使用" class="headerlink" title="3.@Async的使用"></a>3.@Async的使用</h2><p>在使用spring的Java应用中，基于@Async标注的方法，称之为异步方法；这些方法会在执行时，被放入独立的线程中进行执行，调用者无需等待，即可继续其他的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Async &#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何在Spring中使用@Async</p><p>​    基于Java配置的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringExecutorConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** Set the ThreadPoolExecutor's core pool size. */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize = <span class="number">10</span>;  </span><br><span class="line">    <span class="comment">/** Set the ThreadPoolExecutor's maximum pool size. */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize = <span class="number">200</span>;  </span><br><span class="line">    <span class="comment">/** Set the capacity for the ThreadPoolExecutor's BlockingQueue. */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueCapacity = <span class="number">10</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String ThreadNamePrefix = <span class="string">"MyLogExecutor"</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">logExecutor</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();  </span><br><span class="line">        executor.setCorePoolSize(corePoolSize);  </span><br><span class="line">        executor.setMaxPoolSize(maxPoolSize);  </span><br><span class="line">        executor.setQueueCapacity(queueCapacity);  </span><br><span class="line">        executor.setThreadNamePrefix(ThreadNamePrefix);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// rejection-policy：当pool已经达到max size的时候，如何处理新任务  </span></span><br><span class="line">        <span class="comment">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行  </span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());  </span><br><span class="line">        executor.initialize();  </span><br><span class="line">        <span class="keyword">return</span> executor;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    基于XML配置方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--线程池大小为10--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"myExecutor"</span> <span class="attr">pool-size</span>=<span class="string">"10"</span>  /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">"myExecutor"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 处理log的线程池 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"logExecutor"</span> <span class="attr">pool-size</span>=<span class="string">"15-1000"</span> <span class="attr">queue-capacity</span>=<span class="string">"5"</span> <span class="attr">keep-alive</span>=<span class="string">"5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>@Async使用：</p><p>​    无返回值调用</p><p>​        实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span>(<span class="string">"myExecutor"</span>) <span class="comment">//不注明会优先使用缺省"myExecutor"</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncNoReturn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"Execute without return  "</span> + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    有返回值的调用</p><p>​        实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">asyncWithReturn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Execute with return  "</span>  +  Thread.currentThread().getName());  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">Thread.sleep(<span class="number">5000</span>);  </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;String&gt;(<span class="string">"hello world !!!!"</span>);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        logger.error(<span class="string">""</span>, e);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    调用有返回结果的异步方法实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsyncWithResult</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptException, ExecutionException </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"Invoking asynchronous with result"</span> + Thread.currentThread().getName());</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//调用异步方法</span></span><br><span class="line">  Future&lt;String&gt; result = asyncAnnotationExample.asyncWithReturn();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//这里为了简便，直接使用循环判断，等待获取结果信息</span></span><br><span class="line">  <span class="comment">//实际使用要按具体情况处理</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.isDone()) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Result from async with result"</span> + result.get());</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Continue doing something else. "</span> + result.get());</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Async调用中的异常处理"><a href="#4-Async调用中的异常处理" class="headerlink" title="4.@Async调用中的异常处理"></a>4.@Async调用中的异常处理</h2><p>​    由于在异步调用方法中，出现异常，调用方无法感知到，因此如果需要进行异常处理，可以按照如下方式进行：</p><p>​    1.自定义实现AsyncTaskExecutor的任务执行器，在这里实现处理异常的逻辑。</p><p>​    2.配置由自定义的TaskExecutor替代内置的任务执行器</p><p>​    示例：</p><p>​        1.自定义TaskExecutor</p><p>​        可以发现其是实现了AsyncTaskExecutor, 用独立的线程来执行具体的每个方法操作。createCallable和createMyRunnable中，定义了异常的处理方式和机制。</p><p>​        handle()就是未来我们需要关注的异常处理的地方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lyh on 2018/3/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCustomAsyncTaskExecutor</span> <span class="keyword">implements</span> <span class="title">AsyncTaskExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AsyncTaskExecutor executor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCustomAsyncTaskExecutor</span><span class="params">(AsyncTaskExecutor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过包装一层独立的线程方式处理异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        executor.execute(createMyRunnable(task));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过包装一层独立的线程方式处理异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task, <span class="keyword">long</span> startTimeout)</span> </span>&#123;</span><br><span class="line">        executor.execute(createMyRunnable(task), startTimeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">        <span class="keyword">return</span> executor.submit(createMyRunnable(task));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executor.submit(createCallable(task));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用独立的线程来包装任务</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">Callable&lt;T&gt; <span class="title">createCallable</span><span class="params">(<span class="keyword">final</span> Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Callable&lt;T&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> task.call();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    handle(e);</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用独立的线程来包装任务</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Runnable <span class="title">createMyRunnable</span><span class="params">(<span class="keyword">final</span> Runnable task)</span> </span>&#123;</span><br><span class="line">        Runnable wrappedRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    handle(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrappedRunnable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//具体处理异常的方法</span></span><br><span class="line">        System.out.println(<span class="string">"Exception during @Async execution: "</span> + ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        配置文件中的内容：</p><p>​        这里使用自定义的taskExecutor来替代缺省的TaskExecutor</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">"myCustomAsyncTaskExecutor"</span> <span class="attr">scheduler</span>=<span class="string">"defaultTaskScheduler"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myCustomAsyncTaskExecutor"</span> <span class="attr">class</span>=<span class="string">"com.eric.MyCustomAsyncTaskExecutor"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"defaultTaskExecutor"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"defaultTaskExecutor"</span> <span class="attr">pool-size</span>=<span class="string">"5"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"defaultTaskScheduler"</span> <span class="attr">pool-size</span>=<span class="string">"1"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-Async调用中的事务处理机制"><a href="#5-Async调用中的事务处理机制" class="headerlink" title="5.@Async调用中的事务处理机制"></a>5.@Async调用中的事务处理机制</h2><p>使用@Async标注的方法，在其调用数据库操作之时，将无法产生事务管理的控制，原因就在于其是基于异步处理的操作。</p><p>如何给这些操作添加事务管理呢？在使用@Transactional注解的情况下，可以将需要进行事务管理操作的方法放置到异步方法内部，在内部被调用的方法上添加@Transactional注解。</p><p>示例：</p><p>​    methodA，使用了@Async以及@Transactional注解，但无法产生事务控制的目的。</p><p>​    methodB，使用了@Async注解，B中调用了C和D，C/D分别使用@Transactional，则可以实现事务控制的目的。</p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring中的-Async注解&quot;&gt;&lt;a href=&quot;#Spring中的-Async注解&quot; class=&quot;headerlink&quot; title=&quot;Spring中的@Async注解&quot;&gt;&lt;/a&gt;Spring中的@Async注解&lt;/h1&gt;&lt;h2 id=&quot;1-同步和异步&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lyhenrique.github.io/2018/01/12/hello-world/"/>
    <id>http://lyhenrique.github.io/2018/01/12/hello-world/</id>
    <published>2018-01-12T09:47:41.925Z</published>
    <updated>2018-01-12T09:47:41.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Blog-Profile"><a href="#Blog-Profile" class="headerlink" title="Blog Profile"></a>Blog Profile</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Blog-Profile&quot;&gt;&lt;a href=&quot;#Blog-Profile&quot; class=&quot;headerlink&quot; title=&quot;Blog Profile&quot;&gt;&lt;/a&gt;Blog Profile&lt;/h2&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://he
      
    
    </summary>
    
    
  </entry>
  
</feed>
